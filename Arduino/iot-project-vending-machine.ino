#include <WiFiClient.h>
#include <Wire.h>
#include <WiFi.h>
#include <ArduinoMqttClient.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH1106.h>
#include <ArduinoJson.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

#define OLED_RESET -1 // Reset pin #
#define SCREEN_ADDRESS 0x3C 
Adafruit_SH1106 display(21, 22);

#define LOGO_HEIGHT   64
#define LOGO_WIDTH    128

//touch input
#define DOWN_PIN 26
#define ENTER_PIN 27
#define EXIT_PIN 14
#define CART_PIN 25
#define RESUPPLY_PIN 33
#define CANCEL_PIN 13

const char  *SSID = "iPhoneGurru";    // SSID of your WiFi
const char  *PASSWORD = "12345678";    // Password of your WiFi
const char  *mqqttBroker = "test.mosquitto.org";
const int   mqttPort = 1883;
const char  *mqttClientID = "NodeMCU1234";

const char  *queryTopic = "Code-red1/Query"; // Topic for Queries to the server
const char  *purchaseTopic = "Code-red1/Purchase"; // Topic for purchases
const char  *resupplyTopic = "Code-red1/Resupply"; // Topic for purchases
const char  *inTopic = "Code-red1/Response/vm10"; // Topic for responses
const char *willTopic = "arduino/will";

WiFiClient wifiClient;
MqttClient mqttClient(wifiClient);

DynamicJsonDocument buyQuery(96);
DynamicJsonDocument cartObject(768);
DynamicJsonDocument resupplyObject(192);
DynamicJsonDocument purchaseQuery(768);
DynamicJsonDocument nearbyQuery(96);
DynamicJsonDocument productQuery(96);

DynamicJsonDocument response(768);
DynamicJsonDocument buyResponse(768);
DynamicJsonDocument nearbyResponse(768);
DynamicJsonDocument productResponse(768);

char locations[][50] = {"K-Zone", "1.6 km", "vm9", 
"Havelock City Mall", "13.0 km", "vm8",
"Majestic City", "14.2 km", "vm6", 
"BMICH", "15.4 km", "vm7",
"City Centre", "17.1 km", "vm5",
"One Galle Face", "17.7 km", "vm1",
"Fort Railway station", "19.3 km", "vm2",
"SugathadƒÅsa Stadium", "20.2 km", "vm4",
"Lotus Tower", "20.6 km", "vm3"
};

DynamicJsonDocument locationDoc(768);

// 'mainMenuOled', 128x64px
const unsigned char mainMenuOled [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x01, 0xe0, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x01, 0x10, 0x00, 0x00, 0x88, 0x00, 0x00, 0x40, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x01, 0x12, 0x24, 0x40, 0x89, 0x31, 0xc3, 0xc8, 0x8e, 0x3c, 0x70, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x01, 0x12, 0x24, 0x40, 0x89, 0x42, 0x24, 0x48, 0x91, 0x10, 0x88, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x01, 0xe2, 0x24, 0x40, 0xf1, 0x82, 0x24, 0x48, 0x90, 0x10, 0x80, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x01, 0x12, 0x24, 0x40, 0x81, 0x02, 0x24, 0x48, 0x90, 0x10, 0x70, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x01, 0x12, 0x24, 0x40, 0x81, 0x02, 0x24, 0x48, 0x90, 0x10, 0x08, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x01, 0x12, 0x23, 0xc0, 0x81, 0x02, 0x24, 0x48, 0x91, 0x10, 0x88, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x01, 0xe1, 0xc0, 0x40, 0x81, 0x01, 0xc3, 0xc7, 0x0e, 0x0c, 0x70, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 
	0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x1c, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x22, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x20, 0x38, 0x70, 0x10, 0x1c, 0x38, 0x71, 0xe2, 0x1c, 0x78, 0x70, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x20, 0x44, 0x88, 0x10, 0x22, 0x44, 0x88, 0x82, 0x22, 0x44, 0x88, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x1c, 0x44, 0x88, 0x10, 0x22, 0x40, 0x08, 0x82, 0x22, 0x44, 0x80, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x02, 0x7c, 0xf8, 0x10, 0x22, 0x40, 0x78, 0x82, 0x22, 0x44, 0x70, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x02, 0x40, 0x80, 0x10, 0x22, 0x40, 0x88, 0x82, 0x22, 0x44, 0x08, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x22, 0x44, 0x88, 0x10, 0x22, 0x44, 0x88, 0x82, 0x22, 0x44, 0x88, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x1c, 0x38, 0x70, 0x1f, 0x1c, 0x38, 0x78, 0x62, 0x1c, 0x44, 0x70, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 
	0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0xe0, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x01, 0x10, 0x00, 0x00, 0x88, 0x00, 0x00, 0x40, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x01, 0x01, 0xc3, 0x80, 0x89, 0x31, 0xc3, 0xc8, 0x8e, 0x3c, 0x70, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x01, 0x02, 0x24, 0x40, 0x89, 0x42, 0x24, 0x48, 0x91, 0x10, 0x88, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0xe2, 0x24, 0x40, 0xf1, 0x82, 0x24, 0x48, 0x90, 0x10, 0x80, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x13, 0xe7, 0xc0, 0x81, 0x02, 0x24, 0x48, 0x90, 0x10, 0x70, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x12, 0x04, 0x00, 0x81, 0x02, 0x24, 0x48, 0x90, 0x10, 0x08, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x01, 0x12, 0x24, 0x40, 0x81, 0x02, 0x24, 0x48, 0x91, 0x10, 0x88, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0xe1, 0xc3, 0x80, 0x81, 0x01, 0xc3, 0xc7, 0x0e, 0x0c, 0x70, 0x40, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 
	0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char* mainMenuPtr = mainMenuOled;

// 'productComOled', 128x64px
const unsigned char productViewCom [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x93, 0x10, 0xe1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x94, 0x11, 0x12, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0x18, 0x11, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x10, 0x11, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x10, 0x11, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x10, 0x11, 0x12, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x10, 0x10, 0xe1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0x00, 0x00, 0x21, 0x00, 0x20, 0x20, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x80, 0x00, 0x01, 0x00, 0x20, 0x20, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x91, 0x1c, 0x21, 0x0e, 0x3c, 0x21, 0xc0, 0x44, 0xf2, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x91, 0x22, 0x21, 0x11, 0x22, 0x22, 0x20, 0x44, 0x42, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x91, 0x02, 0x21, 0x01, 0x22, 0x22, 0x20, 0x44, 0x42, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0x91, 0x1e, 0x21, 0x0f, 0x22, 0x23, 0xe0, 0x44, 0x42, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x91, 0x22, 0x21, 0x11, 0x22, 0x22, 0x00, 0x54, 0x42, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x8a, 0x22, 0x21, 0x11, 0x22, 0x22, 0x20, 0x48, 0x41, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x84, 0x1e, 0x20, 0x8f, 0x3c, 0x11, 0xc0, 0x34, 0x30, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char* productViewComPtr = productViewCom;

// 'product1', 75x12px
const unsigned char buyMenuproduct1 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x06, 0x00, 0x00, 
	0x00, 0x01, 0x80, 0x00, 0x66, 0x00, 0x00, 0x06, 0x00, 0x00, 0x30, 0x03, 0x80, 0x00, 0x66, 0x66, 
	0x3c, 0x3e, 0x66, 0x3c, 0x7c, 0x07, 0x80, 0x00, 0x66, 0x6e, 0x66, 0x66, 0x66, 0x66, 0x30, 0x05, 
	0x80, 0x00, 0x7c, 0x70, 0x66, 0x66, 0x66, 0x60, 0x30, 0x01, 0x80, 0x00, 0x60, 0x60, 0x66, 0x66, 
	0x66, 0x60, 0x30, 0x01, 0x80, 0x00, 0x60, 0x60, 0x66, 0x66, 0x66, 0x60, 0x30, 0x01, 0x80, 0x00, 
	0x60, 0x60, 0x66, 0x66, 0x66, 0x66, 0x30, 0x01, 0x80, 0x00, 0x60, 0x60, 0x3c, 0x3e, 0x3c, 0x3c, 
	0x1c, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'product2', 75x12px
const unsigned char buyMenuproduct2 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x06, 0x00, 0x00, 
	0x00, 0x07, 0x80, 0x00, 0x66, 0x00, 0x00, 0x06, 0x00, 0x00, 0x30, 0x0c, 0xc0, 0x00, 0x66, 0x66, 
	0x3c, 0x3e, 0x66, 0x3c, 0x7c, 0x00, 0xc0, 0x00, 0x66, 0x6e, 0x66, 0x66, 0x66, 0x66, 0x30, 0x01, 
	0x80, 0x00, 0x7c, 0x70, 0x66, 0x66, 0x66, 0x60, 0x30, 0x03, 0x00, 0x00, 0x60, 0x60, 0x66, 0x66, 
	0x66, 0x60, 0x30, 0x06, 0x00, 0x00, 0x60, 0x60, 0x66, 0x66, 0x66, 0x60, 0x30, 0x0c, 0x00, 0x00, 
	0x60, 0x60, 0x66, 0x66, 0x66, 0x66, 0x30, 0x0c, 0x00, 0x00, 0x60, 0x60, 0x3c, 0x3e, 0x3c, 0x3c, 
	0x1c, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'product3', 75x12px
const unsigned char buyMenuproduct3 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x06, 0x00, 0x00, 
	0x00, 0x07, 0x80, 0x00, 0x66, 0x00, 0x00, 0x06, 0x00, 0x00, 0x30, 0x0c, 0xc0, 0x00, 0x66, 0x66, 
	0x3c, 0x3e, 0x66, 0x3c, 0x7c, 0x00, 0xc0, 0x00, 0x66, 0x6e, 0x66, 0x66, 0x66, 0x66, 0x30, 0x00, 
	0xc0, 0x00, 0x7c, 0x70, 0x66, 0x66, 0x66, 0x60, 0x30, 0x03, 0x80, 0x00, 0x60, 0x60, 0x66, 0x66, 
	0x66, 0x60, 0x30, 0x00, 0xc0, 0x00, 0x60, 0x60, 0x66, 0x66, 0x66, 0x60, 0x30, 0x00, 0xc0, 0x00, 
	0x60, 0x60, 0x66, 0x66, 0x66, 0x66, 0x30, 0x0c, 0xc0, 0x00, 0x60, 0x60, 0x3c, 0x3e, 0x3c, 0x3c, 
	0x1c, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'product4', 75x12px
const unsigned char buyMenuproduct4 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x06, 0x00, 0x00, 
	0x00, 0x00, 0xc0, 0x00, 0x66, 0x00, 0x00, 0x06, 0x00, 0x00, 0x30, 0x01, 0xc0, 0x00, 0x66, 0x66, 
	0x3c, 0x3e, 0x66, 0x3c, 0x7c, 0x03, 0xc0, 0x00, 0x66, 0x6e, 0x66, 0x66, 0x66, 0x66, 0x30, 0x06, 
	0xc0, 0x00, 0x7c, 0x70, 0x66, 0x66, 0x66, 0x60, 0x30, 0x0c, 0xc0, 0x00, 0x60, 0x60, 0x66, 0x66, 
	0x66, 0x60, 0x30, 0x0f, 0xc0, 0x00, 0x60, 0x60, 0x66, 0x66, 0x66, 0x60, 0x30, 0x00, 0xc0, 0x00, 
	0x60, 0x60, 0x66, 0x66, 0x66, 0x66, 0x30, 0x00, 0xc0, 0x00, 0x60, 0x60, 0x3c, 0x3e, 0x3c, 0x3c, 
	0x1c, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'product5', 75x12px
const unsigned char buyMenuproduct5 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x06, 0x00, 0x00, 
	0x00, 0x0f, 0xc0, 0x00, 0x66, 0x00, 0x00, 0x06, 0x00, 0x00, 0x30, 0x0c, 0x00, 0x00, 0x66, 0x66, 
	0x3c, 0x3e, 0x66, 0x3c, 0x7c, 0x0c, 0x00, 0x00, 0x66, 0x6e, 0x66, 0x66, 0x66, 0x66, 0x30, 0x0f, 
	0x80, 0x00, 0x7c, 0x70, 0x66, 0x66, 0x66, 0x60, 0x30, 0x00, 0xc0, 0x00, 0x60, 0x60, 0x66, 0x66, 
	0x66, 0x60, 0x30, 0x00, 0xc0, 0x00, 0x60, 0x60, 0x66, 0x66, 0x66, 0x60, 0x30, 0x00, 0xc0, 0x00, 
	0x60, 0x60, 0x66, 0x66, 0x66, 0x66, 0x30, 0x0c, 0xc0, 0x00, 0x60, 0x60, 0x3c, 0x3e, 0x3c, 0x3c, 
	0x1c, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'product6', 75x12px
const unsigned char buyMenuproduct6 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x06, 0x00, 0x00, 
	0x00, 0x07, 0x80, 0x00, 0x66, 0x00, 0x00, 0x06, 0x00, 0x00, 0x30, 0x0c, 0xc0, 0x00, 0x66, 0x66, 
	0x3c, 0x3e, 0x66, 0x3c, 0x7c, 0x0c, 0x00, 0x00, 0x66, 0x6e, 0x66, 0x66, 0x66, 0x66, 0x30, 0x0c, 
	0x00, 0x00, 0x7c, 0x70, 0x66, 0x66, 0x66, 0x60, 0x30, 0x0f, 0x80, 0x00, 0x60, 0x60, 0x66, 0x66, 
	0x66, 0x60, 0x30, 0x0c, 0xc0, 0x00, 0x60, 0x60, 0x66, 0x66, 0x66, 0x60, 0x30, 0x0c, 0xc0, 0x00, 
	0x60, 0x60, 0x66, 0x66, 0x66, 0x66, 0x30, 0x0c, 0xc0, 0x00, 0x60, 0x60, 0x3c, 0x3e, 0x3c, 0x3c, 
	0x1c, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'product7', 75x12px
const unsigned char buyMenuproduct7 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x06, 0x00, 0x00, 
	0x00, 0x0f, 0xc0, 0x00, 0x66, 0x00, 0x00, 0x06, 0x00, 0x00, 0x30, 0x00, 0xc0, 0x00, 0x66, 0x66, 
	0x3c, 0x3e, 0x66, 0x3c, 0x7c, 0x00, 0xc0, 0x00, 0x66, 0x6e, 0x66, 0x66, 0x66, 0x66, 0x30, 0x01, 
	0x80, 0x00, 0x7c, 0x70, 0x66, 0x66, 0x66, 0x60, 0x30, 0x03, 0x00, 0x00, 0x60, 0x60, 0x66, 0x66, 
	0x66, 0x60, 0x30, 0x06, 0x00, 0x00, 0x60, 0x60, 0x66, 0x66, 0x66, 0x60, 0x30, 0x0c, 0x00, 0x00, 
	0x60, 0x60, 0x66, 0x66, 0x66, 0x66, 0x30, 0x0c, 0x00, 0x00, 0x60, 0x60, 0x3c, 0x3e, 0x3c, 0x3c, 
	0x1c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'product8', 75x12px
const unsigned char buyMenuproduct8 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x06, 0x00, 0x00, 
	0x00, 0x07, 0x80, 0x00, 0x66, 0x00, 0x00, 0x06, 0x00, 0x00, 0x30, 0x0c, 0xc0, 0x00, 0x66, 0x66, 
	0x3c, 0x3e, 0x66, 0x3c, 0x7c, 0x0c, 0xc0, 0x00, 0x66, 0x6e, 0x66, 0x66, 0x66, 0x66, 0x30, 0x0c, 
	0xc0, 0x00, 0x7c, 0x70, 0x66, 0x66, 0x66, 0x60, 0x30, 0x07, 0x80, 0x00, 0x60, 0x60, 0x66, 0x66, 
	0x66, 0x60, 0x30, 0x0c, 0xc0, 0x00, 0x60, 0x60, 0x66, 0x66, 0x66, 0x60, 0x30, 0x0c, 0xc0, 0x00, 
	0x60, 0x60, 0x66, 0x66, 0x66, 0x66, 0x30, 0x0c, 0xc0, 0x00, 0x60, 0x60, 0x3c, 0x3e, 0x3c, 0x3c, 
	0x1c, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'product9', 75x12px
const unsigned char buyMenuproduct9 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x06, 0x00, 0x00, 
	0x00, 0x07, 0x80, 0x00, 0x66, 0x00, 0x00, 0x06, 0x00, 0x00, 0x30, 0x0c, 0xc0, 0x00, 0x66, 0x66, 
	0x3c, 0x3e, 0x66, 0x3c, 0x7c, 0x0c, 0xc0, 0x00, 0x66, 0x6e, 0x66, 0x66, 0x66, 0x66, 0x30, 0x0c, 
	0xc0, 0x00, 0x7c, 0x70, 0x66, 0x66, 0x66, 0x60, 0x30, 0x07, 0xc0, 0x00, 0x60, 0x60, 0x66, 0x66, 
	0x66, 0x60, 0x30, 0x00, 0xc0, 0x00, 0x60, 0x60, 0x66, 0x66, 0x66, 0x60, 0x30, 0x00, 0xc0, 0x00, 
	0x60, 0x60, 0x66, 0x66, 0x66, 0x66, 0x30, 0x0c, 0xc0, 0x00, 0x60, 0x60, 0x3c, 0x3e, 0x3c, 0x3c, 
	0x1c, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'product10', 75x12px
const unsigned char buyMenuproduct10 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x06, 0x00, 0x00, 
	0x00, 0x01, 0x87, 0x80, 0x66, 0x00, 0x00, 0x06, 0x00, 0x00, 0x30, 0x03, 0x8c, 0xc0, 0x66, 0x66, 
	0x3c, 0x3e, 0x66, 0x3c, 0x7c, 0x07, 0x8c, 0xc0, 0x66, 0x6e, 0x66, 0x66, 0x66, 0x66, 0x30, 0x05, 
	0x8d, 0xc0, 0x7c, 0x70, 0x66, 0x66, 0x66, 0x60, 0x30, 0x01, 0x8f, 0xc0, 0x60, 0x60, 0x66, 0x66, 
	0x66, 0x60, 0x30, 0x01, 0x8e, 0xc0, 0x60, 0x60, 0x66, 0x66, 0x66, 0x60, 0x30, 0x01, 0x8c, 0xc0, 
	0x60, 0x60, 0x66, 0x66, 0x66, 0x66, 0x30, 0x01, 0x8c, 0xc0, 0x60, 0x60, 0x3c, 0x3e, 0x3c, 0x3c, 
	0x1c, 0x01, 0x87, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1440)
const int buyMenuallArray_LEN = 10;
const unsigned char* buyMenuallArray[10] = {
	buyMenuproduct1,
	buyMenuproduct2,
	buyMenuproduct3,
	buyMenuproduct4,
	buyMenuproduct5,
	buyMenuproduct6,
	buyMenuproduct7,
	buyMenuproduct8,
	buyMenuproduct9,
  buyMenuproduct10
};



const unsigned char triangle [] PROGMEM = {
	0x08, 0x18, 0x38, 0x78, 0xf8, 0x78, 0x38, 0x18, 0x08
};
const unsigned char* triangle_pointer = triangle;

// 'set-quantity', 128x64px
const unsigned char set_quantity_scr [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0x30, 0x01, 0x80, 0x66, 0x00, 0x00, 0x00, 0x30, 0x01, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0x01, 0xe3, 0xe0, 0x66, 0x66, 0x3c, 0x7c, 0x7c, 0x63, 0xe6, 0x60, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0x03, 0x31, 0x80, 0x66, 0x66, 0x66, 0x66, 0x30, 0x61, 0x86, 0x60, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xe3, 0x31, 0x80, 0x66, 0x66, 0x06, 0x66, 0x30, 0x61, 0x86, 0x60, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x33, 0xf1, 0x80, 0x76, 0x66, 0x3e, 0x66, 0x30, 0x61, 0x86, 0x60, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x33, 0x01, 0x80, 0x7e, 0x66, 0x66, 0x66, 0x30, 0x61, 0x86, 0x60, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0x33, 0x31, 0x80, 0x6c, 0x66, 0x66, 0x66, 0x30, 0x61, 0x83, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xe1, 0xe0, 0xe0, 0x36, 0x3c, 0x3e, 0x66, 0x1c, 0x60, 0xe0, 0x60, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x60, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char* set_quantity_scrPtr = set_quantity_scr;




void mqttInit() {
  WiFi.begin(SSID, PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(SSID);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  if (!mqttClient.connect(mqqttBroker, mqttPort)) {
    Serial.print("MQTT connection failed! Error code = ");
    Serial.println(mqttClient.connectError());

    while (1);
  }
  Serial.println("You're connected to the MQTT broker!");
  Serial.println();

  String willPayload = "oh no!";
  bool willRetain = true;
  int willQos = 1;

  mqttClient.beginWill(willTopic, willPayload.length(), willRetain, willQos);
  mqttClient.print(willPayload);
  mqttClient.endWill();

  int subscribeQos = 1;
  mqttClient.subscribe(inTopic, subscribeQos);

  // mqttClient.onMessage(onMqttMessage);

}

void mqttLoop() {
    while (!mqttClient.connected()) {
        Serial.print("Attempting MQTT connection...");
        mqttClient.connect(mqqttBroker, mqttPort);
        if (mqttClient.connect(mqttClientID)) {
          Serial.println("connected");
        }
        else if (WiFi.status() != WL_CONNECTED){
          Serial.print("Wifi connection failed");
          Serial.println(" try again in 5 seconds");
          delay(5000);
        } 
        else {
          Serial.print("failed, rc=");
          Serial.print(mqttClient.connectError());
          Serial.println(" try again in 5 seconds");
          delay(5000);
        }
    }
}

void pinInit() {
  pinMode(DOWN_PIN, INPUT);
  pinMode(ENTER_PIN, INPUT);
  pinMode(EXIT_PIN, INPUT);
  pinMode(CART_PIN, INPUT);
  pinMode(RESUPPLY_PIN, INPUT);
  pinMode(CANCEL_PIN, INPUT);
}

void setup() {
  pinInit();
  Serial.begin(9600);
  Serial.println(F("\nESP8266 WiFi scan example"));

  // Set WiFi to station mode
  WiFi.mode(WIFI_STA);

  // Disconnect from an AP if it was previously connected
  mqttInit();

  Serial.print("Subscribing to topic: ");
  Serial.println(inTopic);
  Serial.println();

  display.begin(SH1106_SWITCHCAPVCC, SCREEN_ADDRESS);
  // Show image buffer on the display hardware.
  // Since the buffer is intialized with an Adafruit splashscreen
  // internally, this will display the splashscreen.
  display.display();
  delay(5000);

  // Clear the buffer.
  display.clearDisplay();

  cartInit();
  locationInit();

  //buy();
}

int menuIndex1 = 0;
void loop() {

  mqttClient.poll();
  // put your main code here, to run repeatedly:
  if (digitalRead(DOWN_PIN) == 1){
    delay(200);
    display.clearDisplay();
    print_scrn(mainMenuOled);
    menuIndex1++;
    if (menuIndex1 == 3){
      menuIndex1 = 0;
    }
    display.drawBitmap(101, 11 + menuIndex1*17, triangle_pointer, 5, 10, 1);
    display.display();
    delay(250);
  }
  else{
    print_scrn(mainMenuOled);
    display.drawBitmap(101, 11 + menuIndex1*17, triangle_pointer, 5, 10, 1);
    display.display();
    delay(100);
  }
  
  if (digitalRead(ENTER_PIN) == 1){
    delay(200);
    display.clearDisplay();
    processingDisp();
    
    // else if (response["type"] == "product"){
    //   productResponse = response;
    // }
    // serializeJson(buyResponse, payload);

    switch (menuIndex1) {
    case 0:
      buy();
      display.clearDisplay();
      buyMenu ();
      break;
    case 1:
      display.clearDisplay();
      nearbyLocations();
      break;
    case 2:
      display.clearDisplay();
      seeProductsMenu();

    default:
      // statements
      break;
    }

  }

    
  
  if (digitalRead(CART_PIN) == 1){
    delay(200);
    processingDisp();
    cartView();
  }
}
//display.drawBitmap(0, 0, quantityViewproductComOled, LOGO_WIDTH, LOGO_HEIGHT, 1);

void print_scrn (const unsigned char* pointer){
  display.drawBitmap(0,0,pointer, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
}

void buyMenu (){
  int messageSize = mqttClient.parseMessage();
  if (messageSize) {
    // we received a message, print out the topic and contents
    Serial.print("Received a message with topic '");
    Serial.print(mqttClient.messageTopic());
    Serial.print("', length ");
    Serial.print(messageSize);
    Serial.println(" bytes:");

    String payload = "";
    while (mqttClient.available()) {
      payload += (char)mqttClient.read();
    }

    deserializeJson(response, payload);

    if (response["type"] == "products" && response["id"] == "vm10"){
      buyResponse = response;
    }
    else{
      return;
    }
  }
  else{
    return;
  }
  int menuIndex2 = 0;
  for(;;){
    mqttClient.poll();
    char pName[4];
    if (digitalRead(DOWN_PIN) == 1){
      delay(200);
      menuIndex2++;
      display.clearDisplay();
      print_scrn(productViewComPtr);
      if (menuIndex2 == 10){
        menuIndex2 = 0;
      }
      display.drawBitmap(26, 4, buyMenuallArray[menuIndex2], 75, 12, 1);
      display.display();
      char pName[4];
      sprintf(pName, "p%d", menuIndex2+1);
      int price = buyResponse["products"][pName]["price"];
      int qty = buyResponse["products"][pName]["quantity"];
      displayPriceQuantity(price, qty);
      delay(100);
    }
    else{
      print_scrn(productViewComPtr);
      display.drawBitmap(26, 4, buyMenuallArray[menuIndex2], 75, 12, 1);
      display.display();
      sprintf(pName, "p%d", menuIndex2+1);
      int price = buyResponse["products"][pName]["price"];
      int qty = buyResponse["products"][pName]["quantity"];
      displayPriceQuantity(price, qty);
      delay(100);
    }
    if (digitalRead(EXIT_PIN) == 1){
      delay(200);
      display.clearDisplay();
      break;
    }
    if (digitalRead(ENTER_PIN) == 1){
      delay(200);
      display.clearDisplay();
      setQuantity(pName);
    }
    // if (digitalRead(CART_PIN) == 1){
    //   delay(200);
    //   display.clearDisplay();
    //   cartView();
    // }
  }
}

void buy(){
  buyQuery["id"] = "vm10";
  buyQuery["requestType"] = "products";
  buyQuery["requestId"] = "vm10";

  String payload;
  serializeJson(buyQuery, payload);

  bool retained = false;
  int qos = 1;
  bool dup = false;

  mqttClient.beginMessage(queryTopic, payload.length(), retained, qos, dup);
  mqttClient.print(payload);
  mqttClient.endMessage();
  delay(1000); //delay to recieve response
}

void displayPriceQuantity(int price, int qty){
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(97,27);
  display.println(price);
  display.setCursor(97,43);
  display.println(qty);
  display.display();
}

void setQuantity(char pId[4]){
  delay(200);
  int count = 0;
  int currentQty = buyResponse["products"][pId]["quantity"];
  for(;;){
    mqttClient.poll();
    if (digitalRead(EXIT_PIN) == 1){
      delay(150);
      count++;
      if (count == 26){
        count = 0;
      }
      display.clearDisplay();
    }
    else if (digitalRead(DOWN_PIN) == 1){
      delay(200);
      count--;
      if (count == -1){
        count = 25;
      }
      display.clearDisplay();
    }
    display.setTextSize(2);
    display.setTextColor(WHITE);
    if (count > 9){
      display.setCursor(52,20);
    }
    else{
      display.setCursor(59,20);
    }
    print_scrn(set_quantity_scrPtr);
    display.println(count);
    display.display();
    if (digitalRead(ENTER_PIN) == 1){
      delay(200);
      
      if (currentQty >= count){
        cartObject[pId] = count;
        display.clearDisplay();
        break;
      }
      else{
        display.setTextSize(1);
        display.setCursor(13,55);
        display.println("Quantity Exceeded");
      }
    }
    if (digitalRead(CANCEL_PIN) == 1){
      delay(200);
      cartObject[pId] = 0;
      display.clearDisplay();
      break;
    }
  }
}

void cartView(){
  delay(500);
  int menuIndex = 1;
  int currIndex = menuIndex;
  bool empty = true;
  for (;;){
    mqttClient.poll();
    char pId[4];
    sprintf(pId, "p%d", menuIndex);
    String pName = "Product " + String(menuIndex);
    int qty = cartObject[pId];
    int price = buyResponse["products"][pId]["price"];
    int subtotal = qty*price;
    
    if (digitalRead(DOWN_PIN) == 1){
      delay(200);
      if (menuIndex == 11){
        menuIndex = 1;
      }
      else{
        menuIndex = currIndex+1;
      }
      display.clearDisplay();
    }
    if (qty != 0){
      int total = totalCalc();

      display.clearDisplay();

      display.setTextSize(1);
      display.setTextColor(WHITE);
      display.setCursor(10,8);
      display.println(pName);

      display.setCursor(10,18);
      display.println("Quantity");
      display.setCursor(76,18);
      display.println(":");
      display.setCursor(95,18);
      display.println(qty);

      display.setCursor(10,28);
      display.println("Unit Price");
      display.setCursor(76,28);
      display.println(":");
      display.setCursor(95,28);
      display.println(price);

      display.setCursor(10,38);
      display.println("Sub Total");
      display.setCursor(76,38);
      display.println(":");
      display.setCursor(95,38);
      display.println(subtotal);

      display.setTextSize(1);
      display.setCursor(10,53);
      display.println("Total");
      display.setCursor(76,53);
      display.println(":");
      display.setCursor(95,53);
      display.println(total);

      display.display();
      empty = false;
      currIndex = menuIndex;
    }
    else{
      menuIndex++;
      if (menuIndex > 11){
        menuIndex = 11;
      }
    if (menuIndex == 11 && empty){
      display.clearDisplay();
      display.setTextSize(2);
      display.setTextColor(WHITE);
      display.setCursor(10,8);
      display.println("Empty");
      display.setCursor(10,28);
      display.println("Cart");
      display.display();
      delay(2000);
      display.clearDisplay();
      display.display();
      break;
    }

    }
    if (digitalRead(CART_PIN) == 1){
      delay(200);
      display.clearDisplay();
      processingDisp();
      purchaseQuery["id"] = "vm10";
      purchaseQuery["products"] = cartObject;

      String payload;
      serializeJson(purchaseQuery, payload);

      bool retained = false;
      int qos = 1;
      bool dup = false;

      mqttClient.beginMessage(purchaseTopic, payload.length(), retained, qos, dup);
      mqttClient.print(payload);
      mqttClient.endMessage();

      delay(1000);
      display.clearDisplay();
      display.println("Purchase successfull");
      display.display();
      cartInit();
      display.clearDisplay();
      buy();
      break;
    }
    if (digitalRead(EXIT_PIN) == 1){
      delay(200);
      display.clearDisplay();
      break;
    }
    if (digitalRead(CANCEL_PIN) == 1){
      delay(200);
      display.clearDisplay();
      display.setTextSize(1);
      display.setCursor(0,0);
      display.println("Are you sure you want to delete cart");
      display.display();
      for(;;){
        mqttClient.poll();
        delay(500);
        if (digitalRead(CANCEL_PIN) == 1){
          delay(200);
          cartInit();
          display.clearDisplay();
          display.setCursor(0,0);
          display.println("Cart cleared");
          display.setCursor(0,12);
          display.println("successfully");
          display.display();
          display.clearDisplay();
          break;
        }
        if (digitalRead(EXIT_PIN) == 1){
          delay(200);
          display.clearDisplay();
          break;
        }
      }
      delay(200);
    }
  }
}

int totalCalc(){
  int total = 0;
  for (int i = 1; i < 11; i++){
    mqttClient.poll();
    char pId[4];
    sprintf(pId, "p%d", i);
    int qty = cartObject[pId];
    int price = buyResponse["products"][pId]["price"];
    if (qty != NULL){
      total += qty*price;
    }
  }
  return total;
}

void processingDisp(){
  display.setTextSize(1);
  display.setCursor(0,0);
  display.println("Please Wait......");
  display.display();
}

void cartInit(){
  cartObject["p1"] = 0;
  cartObject["p2"] = 0;
  cartObject["p3"] = 0;
  cartObject["p4"] = 0;
  cartObject["p5"] = 0;
  cartObject["p6"] = 0;
  cartObject["p7"] = 0;
  cartObject["p8"] = 0;
  cartObject["p9"] = 0;
  cartObject["p10"] = 0;
}


void nearbyLocations(){
  int menuIndex = 0;
  for(;;){
    delay(100);
    mqttClient.poll();
    if (digitalRead(DOWN_PIN) == 1){
      delay(200);
      display.clearDisplay();
      menuIndex++;
      if (menuIndex == 9){
        menuIndex = 0;
      }
    }
    if (digitalRead(EXIT_PIN) == 1){
      delay(200);
      display.clearDisplay();
      break;
    }
    if (digitalRead(ENTER_PIN) == 1){
      delay(200);
      display.clearDisplay();
      nearby(locations[menuIndex*3+2]);
      buyMenu2 (locations[menuIndex*3+2]);
    }
    display.setTextSize(1);
    display.setCursor(0,0);
    display.println(locations[menuIndex*3]);
    display.setTextSize(2);
    display.setCursor(0,12);
    display.println(locations[menuIndex*3+1]);
    display.display();
  }
}

void nearby(const char* vId){
  nearbyQuery["id"] = "vm10";
  nearbyQuery["requestType"] = "products";
  nearbyQuery["requestId"] = vId;

  String payload;
  serializeJson(nearbyQuery, payload);

  bool retained = false;
  int qos = 1;
  bool dup = false;

  mqttClient.beginMessage(queryTopic, payload.length(), retained, qos, dup);
  mqttClient.print(payload);
  mqttClient.endMessage();
  delay(1000); //delay to recieve response
}

void buyMenu2 (const char* vId){
  int messageSize = mqttClient.parseMessage();
  if (messageSize) {
    // we received a message, print out the topic and contents
    Serial.print("Received a message with topic '");
    Serial.print(mqttClient.messageTopic());
    Serial.print("', length ");
    Serial.print(messageSize);
    Serial.println(" bytes:");

    String payload = "";
    while (mqttClient.available()) {
      payload += (char)mqttClient.read();
    }

    deserializeJson(response, payload);

    if (response["type"] == "products" && response["id"] != "vm10"){
      nearbyResponse = response;
    }
    else{
      return;
    }
  }
  else{
    return;
  }
  int menuIndex2 = 0;
  for(;;){
    mqttClient.poll();
    if (digitalRead(DOWN_PIN) == 1){
      delay(200);
      menuIndex2++;
      display.clearDisplay();
      print_scrn(productViewComPtr);
      if (menuIndex2 == 10){
        menuIndex2 = 0;
      }
      display.drawBitmap(26, 4, buyMenuallArray[menuIndex2], 75, 12, 1);
      display.display();
      char pName[4];
      sprintf(pName, "p%d", menuIndex2+1);
      int price = nearbyResponse["products"][pName]["price"];
      int qty = nearbyResponse["products"][pName]["quantity"];
      displayPriceQuantity(price, qty);
      delay(100);
    }
    else{
      print_scrn(productViewComPtr);
      display.drawBitmap(26, 4, buyMenuallArray[menuIndex2], 75, 12, 1);
      display.display();
      char pName[4];
      sprintf(pName, "p%d", menuIndex2+1);
      int price = nearbyResponse["products"][pName]["price"];
      int qty = nearbyResponse["products"][pName]["quantity"];
      displayPriceQuantity(price, qty);
      delay(100);
    }
    if (digitalRead(EXIT_PIN) == 1){
      delay(200);
      display.clearDisplay();
      break;
    }
    // if (digitalRead(ENTER_PIN) == 1){
    //   delay(200);
    //   display.clearDisplay();
    //   setQuantity(pName);
    // }
    // if (digitalRead(CART_PIN) == 1){
    //   delay(200);
    //   display.clearDisplay();
    //   cartView();
    // }
  }
}

void seeProductsMenu(){
  int index = 0;
  display.drawBitmap(26, 25, buyMenuallArray[index], 75, 12, 1);
  display.display();
  for(;;){
    mqttClient.poll();
    if (digitalRead(DOWN_PIN) == 1){
      delay(200);
      index++;
      display.clearDisplay();
      if (index == 10){
        index = 0;
      }
      display.drawBitmap(26, 25, buyMenuallArray[index], 75, 12, 1);
      display.display();
    }
    if (digitalRead(ENTER_PIN) == 1){
      processingDisp();
      delay(200);
      char pId[4];
      sprintf(pId, "p%d", index+1);
      product(pId);
      display.clearDisplay();
      seeProduct(index);
      display.clearDisplay();
      delay(1000);
    }
    if (digitalRead(EXIT_PIN) == 1){
      delay(200);
      display.clearDisplay();
      break;
    }
  }
}

void product(char pId[4]){
  productQuery["id"] = "vm10";
  productQuery["requestType"] = "product";
  productQuery["requestId"] = pId;

  String payload;
  serializeJson(productQuery, payload);

  bool retained = false;
  int qos = 1;
  bool dup = false;

  mqttClient.beginMessage(queryTopic, payload.length(), retained, qos, dup);
  mqttClient.print(payload);
  mqttClient.endMessage();
  delay(1000); //delay to recieve response
}

void seeProduct(int index){
  int messageSize = mqttClient.parseMessage();
  if (messageSize) {
    // we received a message, print out the topic and contents
    Serial.print("Received a message with topic '");
    Serial.print(mqttClient.messageTopic());
    Serial.print("', length ");
    Serial.print(messageSize);
    Serial.println(" bytes:");

    String payload = "";
    while (mqttClient.available()) {
      payload += (char)mqttClient.read();
    }

    deserializeJson(response, payload);

    if (response["type"] == "product"){
      productResponse = response;
      String out;
      serializeJson(productResponse, out);
      Serial.print(out);
      
    }
    else{
      return;
    }
  }
  else{
    return;
  }
  display.clearDisplay();
  display.display();
  int menuIndex2 = 0;
  for(;;){
    mqttClient.poll();
    if (digitalRead(DOWN_PIN) == 1){
      delay(200);
      menuIndex2++;
      display.clearDisplay();
      if (menuIndex2 == 10){
        menuIndex2 = 0;
      }
      display.drawBitmap(26, 4, buyMenuallArray[index], 75, 12, 1);
      char vId[5];
      sprintf(vId, "vm%d", menuIndex2+1);
      display.setTextSize(1);
      display.setCursor(0,20);
      String vName = locationDoc[vId];
      display.println(vName);
      int price = productResponse["locations"][vId]["price"];
      int qty = productResponse["locations"][vId]["quantity"];
      display.setCursor(10, 30);
      display.println("Price");
      display.setCursor(58,30);
      display.println(":");
      display.setCursor(60,30);
      display.println(price);
      display.setCursor(10,40);
      display.println("Quantity");
      display.setCursor(58,40);
      display.println(":");
      display.setCursor(60,40);
      display.println(qty);
      display.display();
      delay(100);
    }
    else{
      display.drawBitmap(26, 4, buyMenuallArray[index], 75, 12, 1);
      display.display();
      char vId[5];
      sprintf(vId, "vm%d", menuIndex2+1);
      display.setTextSize(1);
      display.setCursor(0,20);
      String vName = locationDoc[vId];
      Serial.print(vName);
      display.println(vName);
      int price = productResponse["locations"][vId]["price"];
      int qty = productResponse["locations"][vId]["quantity"];
      display.setCursor(10, 30);
      display.println("Price");
      display.setCursor(68,30);
      display.println(":");
      display.setCursor(80,30);
      display.println(price);
      display.setCursor(10,40);
      display.println("Quantity");
      display.setCursor(68,40);
      display.println(":");
      display.setCursor(80,40);
      display.println(qty);
      display.display();
      delay(100);
    }
    if (digitalRead(EXIT_PIN) == 1){
      delay(200);
      display.clearDisplay();
      return;
    }
  }
}

void locationInit(){
  locationDoc["vm1"]= "One Galle Face";
  locationDoc["vm2"]= "Fort Railway station";
  locationDoc["vm3"]= "Lotus Tower";
  locationDoc["vm4"]= "SugathadƒÅsa Stadium";
  locationDoc["vm5"]= "City Centre";
  locationDoc["vm6"]= "Majestic City";
  locationDoc["vm7"]= "BMICH ";
  locationDoc["vm8"]= "Havelock City Mall";
  locationDoc["vm9"]= "K-Zone";
  locationDoc["vm10"]= "UoM";
}

void resupplyMenu (){
  int messageSize = mqttClient.parseMessage();
  if (messageSize) {
    // we received a message, print out the topic and contents
    Serial.print("Received a message with topic '");
    Serial.print(mqttClient.messageTopic());
    Serial.print("', length ");
    Serial.print(messageSize);
    Serial.println(" bytes:");

    String payload = "";
    while (mqttClient.available()) {
      payload += (char)mqttClient.read();
    }

    deserializeJson(response, payload);

    if (response["type"] == "products" && response["id"] == "vm10"){
      buyResponse = response;
    }
    else{
      return;
    }
  }
  else{
    return;
  }
  int menuIndex2 = 0;
  for(;;){
    mqttClient.poll();
    char pName[4];
    if (digitalRead(DOWN_PIN) == 1){
      delay(200);
      menuIndex2++;
      display.clearDisplay();
      print_scrn(productViewComPtr);
      if (menuIndex2 == 10){
        menuIndex2 = 0;
      }
      display.drawBitmap(26, 4, buyMenuallArray[menuIndex2], 75, 12, 1);
      display.display();
      char pName[4];
      sprintf(pName, "p%d", menuIndex2+1);
      int price = buyResponse["products"][pName]["price"];
      int qty = buyResponse["products"][pName]["quantity"];
      displayPriceQuantity(price, qty);
      delay(100);
    }
    else{
      print_scrn(productViewComPtr);
      display.drawBitmap(26, 4, buyMenuallArray[menuIndex2], 75, 12, 1);
      display.display();
      sprintf(pName, "p%d", menuIndex2+1);
      int price = buyResponse["products"][pName]["price"];
      int qty = buyResponse["products"][pName]["quantity"];
      displayPriceQuantity(price, qty);
      delay(100);
    }
    if (digitalRead(EXIT_PIN) == 1){
      delay(200);
      display.clearDisplay();
      break;
    }
    if (digitalRead(ENTER_PIN) == 1){
      delay(200);
      display.clearDisplay();
      setQuantity(pName);
    }
    // if (digitalRead(CART_PIN) == 1){
    //   delay(200);
    //   display.clearDisplay();
    //   cartView();
    // }
  }
}